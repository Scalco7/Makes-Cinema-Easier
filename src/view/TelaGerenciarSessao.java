package view;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.dao.DaoFactory;
import model.dao.SessaoDao;
import model.entities.Sessao;
import model.entities.Usuario;

/**
 *
 * @author Scalco
 */
public class TelaGerenciarSessao extends javax.swing.JFrame {

    private static TelaGerenciarSessao unicTelaGerenciarSessao;
    private Usuario usuario;

    private TelaGerenciarSessao(Usuario usuario) {
        this.usuario = usuario;
        initComponents();
    }

    public static TelaGerenciarSessao geraTelaGerenciarSessao(Usuario usuario) {
        if (unicTelaGerenciarSessao == null) {
            unicTelaGerenciarSessao = new TelaGerenciarSessao(usuario);
        }

        return unicTelaGerenciarSessao;
    }

    public void abrirTela() {
        atualizarTabela();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nova_botao = new javax.swing.JButton();
        editar_botao = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        voltar_botao = new javax.swing.JButton();
        pesquisar_input = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        pesquisar_botao = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gerenciar Sessao");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Sessões");

        nova_botao.setText("Nova");
        nova_botao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nova_botaoActionPerformed(evt);
            }
        });

        editar_botao.setText("Editar");

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Filme", "Sala", "Data/Horário", "Cam"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabela.setToolTipText("Tabela de filmes");
        jScrollPane1.setViewportView(tabela);

        voltar_botao.setText("Voltar");
        voltar_botao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltar_botaoActionPerformed(evt);
            }
        });

        pesquisar_input.setToolTipText("Barra de pesquisa");

        jLabel2.setText("Pesquisar");

        pesquisar_botao.setText("Pesquisar");
        pesquisar_botao.setMaximumSize(new java.awt.Dimension(646, 647));
        pesquisar_botao.setMinimumSize(new java.awt.Dimension(646, 647));
        pesquisar_botao.setPreferredSize(new java.awt.Dimension(646, 647));
        pesquisar_botao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisar_botaoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(voltar_botao)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nova_botao, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(editar_botao, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pesquisar_input)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pesquisar_botao, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pesquisar_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nova_botao, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(editar_botao, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pesquisar_botao, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(voltar_botao)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void voltar_botaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltar_botaoActionPerformed
        voltar();
    }//GEN-LAST:event_voltar_botaoActionPerformed

    private void nova_botaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nova_botaoActionPerformed
        abrirTelaCadastrar();
    }//GEN-LAST:event_nova_botaoActionPerformed

    private void pesquisar_botaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisar_botaoActionPerformed
        pesquisarSessao();
    }//GEN-LAST:event_pesquisar_botaoActionPerformed

    private void voltar() {
        dispose();
        TelaCentralAdministrador.geraTelaCentralAdministrador(usuario).abrirTela();
    }

    private void abrirTelaCadastrar() {
        dispose();
        TelaCadastrarSessao.geraCadastrarSessao(usuario).abrirTela();
    }

    private void pesquisarSessao() {
        String diaSessao = pesquisar_input.getText().trim();
        diaSessao = diaSessao + ":00";
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        if (!diaSessao.isEmpty()) {
            SessaoDao sessaoDao = DaoFactory.createSessaoDao();
            LocalDateTime dataHora = LocalDateTime.parse(diaSessao, formatter);
            
            List<Sessao> sessoes = sessaoDao.findByDay(dataHora);
            atualizarTabela(sessoes);
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, insira o nome do filme para pesquisa.");
        }
    }

    private void atualizarTabela(List<Sessao> sessoes) {
        DefaultTableModel modelo = (DefaultTableModel) tabela.getModel();
        
        int posLin = 0;
        modelo.setRowCount(posLin);
        
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");

        for (Sessao sessao : sessoes) {
            modelo.insertRow(posLin, new Object[]{
                sessao.getId(),
                sessao.getFilme().getNome(),
                sessao.getSala().getNome(),
                sessao.getHorarioDaSessao().format(formatter),
                sessao.getCam()
            });
            posLin++;
        }
    }
    private void atualizarTabela() {
        DefaultTableModel modelo = (DefaultTableModel) tabela.getModel();
        modelo.setRowCount(0);

        SessaoDao sessaoDao = DaoFactory.createSessaoDao();
        List<Sessao> sessoes = sessaoDao.findByAll();
        int posLin = 0;
        modelo.setRowCount(posLin);

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");

        for (Sessao sessao : sessoes) {
            modelo.insertRow(posLin, new Object[]{
                sessao.getId(),
                sessao.getFilme().getNome(),
                sessao.getSala().getNome(),
                sessao.getHorarioDaSessao().format(formatter),
                sessao.getCam()

            });
            posLin++;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton editar_botao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton nova_botao;
    private javax.swing.JButton pesquisar_botao;
    private javax.swing.JTextField pesquisar_input;
    private javax.swing.JTable tabela;
    private javax.swing.JButton voltar_botao;
    // End of variables declaration//GEN-END:variables
}
